function synnConnEditor(basename)
% synnConnEditor(basename)
%   visual inspection of synnaptic connection on CCG
%   this function requries
%     [basicMetaData.AnalysesName '-synConn.mat']
%     [basicMetaData.AnalysesName '-spkCCG.mat']
%     [basicMetaData.Basename '.goodunits.cellinfo.mat']
%   and the results are added to [basicMetaData.AnalysesName '-synConn.mat']
%
%  synConn and spkCCG can be generated by 
%   custom made function detectSynapticConnections()
%
%  code for synMap
%     1, 'excitation';
%    -1, 'inhibition'; 
%     0, 'no connection';
%    -2, 'not sure'; 
%    -3, 'not cacndidate'
%   nan, 'non-inspected candidate'; 
%
%  by Hiro Miyawaki at the Osaka City Univ, 2019 Mar
%

close all
load([basename,'.basicMetaData.mat'])
fprintf('%s start %s with data of %s\n',datestr(now),mfilename,basicMetaData.SessionName)


synConnFile=[basicMetaData.AnalysesName '-synConn.mat'];
load(synConnFile)
load([basicMetaData.AnalysesName '-synCCG.mat'])

load([basicMetaData.AnalysesName '-okUnit.cellinfo.mat'])


synData.synConn=synConn;
synData.spkCCG=synCCG;
synData.unitInfo=okUnitInfo;
synData.filename=synConnFile;
synData.waveforms=okUnitInfo.waveform.wave;
synData.decay=okUnitInfo.waveform.decay;

if ~isfield(synConn,'inspected')
    [synData.nn,synData.mm]=find(synConn.ex| synConn.inh);
    synData.cur=1;
    temp=sortrows([synData.nn,synData.mm,(1:length(synData.nn))'],1);
    synData.order=temp(:,3);
    synData.synMap=nan(size(synConn.ex));
    synData.synMap(~(synConn.ex| synConn.inh))=-3;
else
    [synData.nn,synData.mm]=find(synConn.inspected.map~=-3);
    temp=sortrows([synData.nn,synData.mm,(1:length(synData.nn))'],1);
    synData.order=temp(:,3);    
    synData.synMap=synConn.inspected.map;

    temp=find(isnan(...
        synData.synMap(...
            synData.nn(synData.order)+(synData.mm(synData.order)-1)*size(synData.synMap,1)...
            )),1,'first');
    if isempty(temp);temp=1;end
    synData.cur=temp;
end


posvar=[0,1000,1400,500];
synData.fig = figure('KeyReleaseFcn', {@keyRel}, 'Position', posvar,'CloseRequestFcn',@checkClose);

set(synData.fig, 'Tag', 'synnConnEditor');

guidata(synData.fig, synData)
plotData(synData)
end

%%
% code for synMap
% 1,'excitation';
% -1,'inhibition'; 
% 0,'no connection';
% -2, 'not sure'; 
% -3, 'not cacndidate'
% nan,'non-inspected candidate'; 
function keyRel(f,e)

    if strcmpi(e.Character,'s')
        saveSynConn()
        return
    end


    obj = findobj('tag','synnConnEditor');  
    synData = guidata(obj); 

    keyGroup{1}={'uparrow','pageup','home'}; %change to ex
    keyGroup{2}={'downarrow','pagedown','end'}; %change to inh
    keyGroup{3}={'rightarrow',}; %change to no connection
    keyGroup{4}={'return','space'}; %accept previous detection/judgement
    keyGroup{5}={'leftarrow'}; %not sure
    keyGroup{6}={'backspace','delete'}; %go back
    
    keyType=find(cellfun(@(x) ismember(e.Key,x),keyGroup),1);
    if isempty(keyType);keyType=0; end
    
    ii=synData.order(synData.cur);
    
    switch keyType
        case 1 %ex
            synData.synMap(synData.nn(ii),synData.mm(ii))=1;
            synData.cur=synData.cur+1;
        case 2 %inh
            synData.synMap(synData.nn(ii),synData.mm(ii))=-1;
            synData.cur=synData.cur+1;            
        case 3 %no conn
            synData.synMap(synData.nn(ii),synData.mm(ii))=0;
            synData.cur=synData.cur+1;
        case 4 %accept
            if isnan(synData.synMap(synData.nn(ii),synData.mm(ii)))
                if synData.synConn.ex(synData.nn(ii),synData.mm(ii))
                    if synData.synConn.inh(synData.nn(ii),synData.mm(ii))
                         synData.synMap(synData.nn(ii),synData.mm(ii))=-2;
                    else
                         synData.synMap(synData.nn(ii),synData.mm(ii))=1;                        
                    end
                else
                    if synData.synConn.inh(synData.nn(ii),synData.mm(ii))
                         synData.synMap(synData.nn(ii),synData.mm(ii))=-1;                                                
                    else
                         synData.synMap(synData.nn(ii),synData.mm(ii))=0;                                                                        
                    end
                end                    
            end
            synData.cur=synData.cur+1;            
        case 5 %not sure
            synData.synMap(synData.nn(ii),synData.mm(ii))=-2;
            synData.cur=synData.cur+1;
        case 6 %show previous
            synData.cur=synData.cur-1;
    end
    
    if keyType>0
        if synData.cur<1;synData.cur=length(synData.order);end
        if synData.cur>length(synData.order);synData.cur=1;end
        guidata(synData.fig, synData)
        plotData(synData)
    end
end

%% plot data
function plotData(synData)
    spkCCG=synData.spkCCG;
    synConn=synData.synConn;
    unitInfo=synData.unitInfo;
    waveforms=synData.waveforms;
    nn=synData.nn;
    mm=synData.mm;
    ii=synData.order(synData.cur);

    clf
    % ACG of presynaptic cell
    axes('position',[0.05,0.6,0.1,0.3])
    bar(spkCCG.t,spkCCG.cnt(:,nn(ii),nn(ii)),1,'k','linestyle','none')
    xlim(spkCCG.t([1,end]))
    title(sprintf('Pre: %s\nsh%d ch%d unit%d',unitInfo.region{nn(ii)},unitInfo.shank(nn(ii)),unitInfo.channel(nn(ii)), nn(ii)))
    box off

    % ACG of postsynaptic cell
    axes('position',[0.05,0.15,0.1,0.3])
    bar(spkCCG.t,spkCCG.cnt(:,mm(ii),mm(ii)),1,'r','linestyle','none')
    xlim(spkCCG.t([1,end]))
    title(sprintf('Post: %s\nsh%d ch%d unit%d',unitInfo.region{mm(ii)},unitInfo.shank(mm(ii)),unitInfo.channel(mm(ii)), mm(ii)))
    box off

    %wave forms
    axes('position',[0.175,0.1,0.15,0.8])
    hold on
    t=(0:size(waveforms(nn(ii)).mean,2)-1)/20;
    plot(t,(waveforms(nn(ii)).mean'-150*(1:size(waveforms(nn(ii)).mean,1))),'k-')
    plot(t,(waveforms(mm(ii)).mean'-150*(1:size(waveforms(mm(ii)).mean,1)))','r-')
    axis tight
    axis off
    title(sprintf('decay : %1.2f ms, \\color[rgb]{1,0,0}%1.2f ms',synData.decay(nn(ii)),synData.decay(mm(ii))))
    %CCG
    axes('position',[0.35,0.1,0.35,0.8])
    hold on
    bar(spkCCG.t,spkCCG.cnt(:,nn(ii),mm(ii)),1,'k','linestyle','none')
    plot(spkCCG.t,spkCCG.confInt(:,nn(ii),mm(ii),2),'r-')
    plot(spkCCG.t,spkCCG.confInt(:,nn(ii),mm(ii),1),'b-')
    ax=axis;
    plot([0,0],ax(3:4),'k-')

    % highlight detection period on CCG
    rectangle('position',[synConn.param.judgeWindow(1),ax(3),diff(synConn.param.judgeWindow),diff(ax(3:4))],...
                'linestyle','none','facecolor','y')    
    h=get(gca,'Children');
    isRec=ismember(h,findobj(h,'type','rectangle'));
    set(gca,'Children',[h(~isRec);h(isRec)])
    
    % set closeness of channels with maximum amplitude
    if unitInfo.shank(nn(ii))== unitInfo.shank(mm(ii))
        if unitInfo.channel(nn(ii))==unitInfo.channel(mm(ii))
            tText='\color[rgb]{1,0,0}Same Ch - ';
        elseif abs(unitInfo.channel(nn(ii))-unitInfo.channel(mm(ii)))<5
            tText='\color[rgb]{1,0.5,0}Close Ch - ';
        else
            tText='\color[rgb]{0.75,0.5,0}Same Sh - ';
        end
    else
            tText='\color[rgb]{0,0,0}Diff Sh - ';
    end
    
    %set current detection status 
    if isnan(synData.synMap(nn(ii),mm(ii)))
        if synConn.ex(nn(ii),mm(ii))
            tText=[tText, '\color[rgb]{1,0,0}ex'];
        end
        if synConn.inh(nn(ii),mm(ii))
            tText=[tText, '\color[rgb]{0,0,1}inh'];
        end
        if isempty(tText)
            tText='no connection';
        end
    else
        switch synData.synMap(nn(ii),mm(ii))
            case 1
                tText=[tText, '\color[rgb]{1,0,0}ex'];
            case 0
                tText=[tText, '\color[rgb]{0,0,0}no connection'];
            case -1
                tText=[tText, '\color[rgb]{0,0,1}inh'];
            otherwise
                tText=[tText, '\color[rgb]{0.8,0.8,0}not sure'];
        end
        
    end
    title(tText)
    xlim(spkCCG.t([1,end]))



    % connection map 
    axes('position',[0.75,0.34,0.2,0.56])
    img=synData.synMap;
    img(isnan(img))=-4;
    imagesc(img)

    synCol=[0,0,0;        %current
          1,1,1;        % not checked
          0.75*[1,1,1]; % excluded
          0.9,0.9,0;        % not sure
          0.3,0.3,1;        %inh
          0,0,0;  %no conn
          1,0,0;        %ex
          ];
    
    colormap(gca,synCol)
              
    set(gca,'clim',[-5,1])
    axis equal
    set(gca,'xtick',[],'YTick',[])
    box off
%     axis off
    ax=axis;
%     ylim(ax(3:4)-ax(3))
    title(sprintf('%d/%d',synData.cur,length(synData.order)))
    rectangle('position',[mm(ii)-0.5,nn(ii)-0.5,1,1],'EdgeColor',[0,1,1],'LineWidth',1)
    text2(0.7,0,{
        ['\color[rgb]{' num2str(synCol(7,:)) '}excitatory ' '\color[rgb]{' num2str(synCol(5,:)) '}inhibitory']
        ['\color[rgb]{' num2str(synCol(6,:)) '}No connection ' '\color[rgb]{' num2str(synCol(4,:)) '}not sure']
        ['\color[rgb]{' num2str(synCol(2,:)) '}not checked']},ax,'verticalalign','bottom')
    ylabel('Pre')
    xlabel('Post')
    
    % summary    
    axes('position',[0.97,0.34,0.01,0.56])
    exCand=sum(synData.synMap==1,2)>0;
    inhCand=sum(synData.synMap==-1,2)>0;
    candMap=(exCand & ~inhCand)-(~exCand & inhCand);
    candMap(exCand & inhCand)=-2;
    imagesc(candMap)
    colormap(gca,synCol)              
    set(gca,'clim',[-5,1])
    set(gca,'xtick',[],'YTick',[])
    rectangle('position',[0.5,nn(ii)-0.5,1,1],'EdgeColor',[0,1,1],'LineWidth',1)
    box off    
    
    % manual
    axes('position',[0.75,0.1,0.2,0.19])
    text(0.1,1,{'\Uparrow' '\Downarrow','\Rightarrow','\Leftarrow'},...
        'verticalAlign','top','horizontalAlign','right')
    text(0.11,1,{'Set excitation','Set inhibition','Set no-connection','Set not-sure'},...
        'verticalAlign','top','horizontalAlign','left')
    text(0.6,1,{'Enter:' 'Delete:' 'S:'},...
       'verticalAlign','top','horizontalAlign','right')
    text(0.61,1,{'Accept current detection' 'Back to previous pair' 'Save results'},...
       'verticalAlign','top','horizontalAlign','left')
    axis off
end

%% save result
function saveSynConn()
    obj = findobj('tag','synnConnEditor');  
    synData = guidata(obj); 

    synConn=synData.synConn;
    synConn.inspected.map=synData.synMap;
    synConn.inspected.code={1,'excitation'; ...
                            -1,'inhibition'; ...
                            0,'no connection'; ...
                            -2, 'not sure'; ...
                            -3, 'not cacndidate';...
                            nan,'non-inspected candidate';};
    synConn.inspected.generator=mfilename;
    synConn.inspected.generatedate=datestr(now,'yyyy-mm-dd');
    
    disp(['save to ' synData.filename])
    save(synData.filename,'synConn','-v7.3')
end

%% check before close GUI
function checkClose(e,str)
    Choise=questdlg('Save the results before closing GUI?','synnConnEditor');
    
    if strcmpi(Choise,'cancel')
        return
    end
    if strcmpi(Choise,'yes')
        saveSynConn();
    end
    delete(e)

end




